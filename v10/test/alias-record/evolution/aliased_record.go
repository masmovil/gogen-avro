// Code generated by github.com/masmovil/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     evolution.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/masmovil/gogen-avro/v10/compiler"
	"github.com/masmovil/gogen-avro/v10/vm"
	"github.com/masmovil/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type AliasedRecord struct {
	StringField string `json:"StringField"`

	BoolField bool `json:"BoolField"`

	BytesField Bytes `json:"BytesField"`
}

const AliasedRecordAvroCRC64Fingerprint = "\x95\xd965\xeb$\xa8\x19"

func NewAliasedRecord() AliasedRecord {
	r := AliasedRecord{}
	return r
}

func DeserializeAliasedRecord(r io.Reader) (AliasedRecord, error) {
	t := NewAliasedRecord()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeAliasedRecordFromSchema(r io.Reader, schema string) (AliasedRecord, error) {
	t := NewAliasedRecord()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeAliasedRecord(r AliasedRecord, w io.Writer) error {
	var err error
	err = vm.WriteString(r.StringField, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.BoolField, w)
	if err != nil {
		return err
	}
	err = vm.WriteBytes(r.BytesField, w)
	if err != nil {
		return err
	}
	return err
}

func (r AliasedRecord) Serialize(w io.Writer) error {
	return writeAliasedRecord(r, w)
}

func (r AliasedRecord) Schema() string {
	return "{\"aliases\":[\"NestedRecord\"],\"fields\":[{\"name\":\"StringField\",\"type\":\"string\"},{\"name\":\"BoolField\",\"type\":\"boolean\"},{\"name\":\"BytesField\",\"type\":\"bytes\"}],\"name\":\"aliasedRecord\",\"type\":\"record\"}"
}

func (r AliasedRecord) SchemaName() string {
	return "aliasedRecord"
}

func (_ AliasedRecord) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ AliasedRecord) SetInt(v int32)       { panic("Unsupported operation") }
func (_ AliasedRecord) SetLong(v int64)      { panic("Unsupported operation") }
func (_ AliasedRecord) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ AliasedRecord) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ AliasedRecord) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ AliasedRecord) SetString(v string)   { panic("Unsupported operation") }
func (_ AliasedRecord) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *AliasedRecord) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.StringField}

		return w

	case 1:
		w := types.Boolean{Target: &r.BoolField}

		return w

	case 2:
		w := BytesWrapper{Target: &r.BytesField}

		return w

	}
	panic("Unknown field index")
}

func (r *AliasedRecord) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *AliasedRecord) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ AliasedRecord) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ AliasedRecord) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ AliasedRecord) HintSize(int)                     { panic("Unsupported operation") }
func (_ AliasedRecord) Finalize()                        {}

func (_ AliasedRecord) AvroCRC64Fingerprint() []byte {
	return []byte(AliasedRecordAvroCRC64Fingerprint)
}

func (r AliasedRecord) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["StringField"], err = json.Marshal(r.StringField)
	if err != nil {
		return nil, err
	}
	output["BoolField"], err = json.Marshal(r.BoolField)
	if err != nil {
		return nil, err
	}
	output["BytesField"], err = json.Marshal(r.BytesField)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *AliasedRecord) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["StringField"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.StringField); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for StringField")
	}
	val = func() json.RawMessage {
		if v, ok := fields["BoolField"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.BoolField); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for BoolField")
	}
	val = func() json.RawMessage {
		if v, ok := fields["BytesField"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.BytesField); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for BytesField")
	}
	return nil
}
