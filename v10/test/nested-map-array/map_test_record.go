// Code generated by github.com/masmovil/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     schema.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/masmovil/gogen-avro/v10/compiler"
	"github.com/masmovil/gogen-avro/v10/vm"
	"github.com/masmovil/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type MapTestRecord struct {
	Text string `json:"text"`

	RecursiveField map[string][]MapTestRecord `json:"RecursiveField"`
}

const MapTestRecordAvroCRC64Fingerprint = "\xda\x03h\x1a\xd2,\xe4\x9f"

func NewMapTestRecord() MapTestRecord {
	r := MapTestRecord{}
	r.RecursiveField = make(map[string][]MapTestRecord)

	return r
}

func DeserializeMapTestRecord(r io.Reader) (MapTestRecord, error) {
	t := NewMapTestRecord()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeMapTestRecordFromSchema(r io.Reader, schema string) (MapTestRecord, error) {
	t := NewMapTestRecord()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeMapTestRecord(r MapTestRecord, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Text, w)
	if err != nil {
		return err
	}
	err = writeMapArrayMapTestRecord(r.RecursiveField, w)
	if err != nil {
		return err
	}
	return err
}

func (r MapTestRecord) Serialize(w io.Writer) error {
	return writeMapTestRecord(r, w)
}

func (r MapTestRecord) Schema() string {
	return "{\"fields\":[{\"name\":\"text\",\"type\":\"string\"},{\"name\":\"RecursiveField\",\"type\":{\"type\":\"map\",\"values\":{\"items\":\"MapTestRecord\",\"type\":\"array\"}}}],\"name\":\"MapTestRecord\",\"type\":\"record\"}"
}

func (r MapTestRecord) SchemaName() string {
	return "MapTestRecord"
}

func (_ MapTestRecord) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ MapTestRecord) SetInt(v int32)       { panic("Unsupported operation") }
func (_ MapTestRecord) SetLong(v int64)      { panic("Unsupported operation") }
func (_ MapTestRecord) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ MapTestRecord) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ MapTestRecord) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ MapTestRecord) SetString(v string)   { panic("Unsupported operation") }
func (_ MapTestRecord) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *MapTestRecord) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Text}

		return w

	case 1:
		r.RecursiveField = make(map[string][]MapTestRecord)

		w := MapArrayMapTestRecordWrapper{Target: &r.RecursiveField}

		return &w

	}
	panic("Unknown field index")
}

func (r *MapTestRecord) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *MapTestRecord) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ MapTestRecord) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ MapTestRecord) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ MapTestRecord) HintSize(int)                     { panic("Unsupported operation") }
func (_ MapTestRecord) Finalize()                        {}

func (_ MapTestRecord) AvroCRC64Fingerprint() []byte {
	return []byte(MapTestRecordAvroCRC64Fingerprint)
}

func (r MapTestRecord) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["text"], err = json.Marshal(r.Text)
	if err != nil {
		return nil, err
	}
	output["RecursiveField"], err = json.Marshal(r.RecursiveField)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *MapTestRecord) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["text"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Text); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for text")
	}
	val = func() json.RawMessage {
		if v, ok := fields["RecursiveField"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.RecursiveField); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for RecursiveField")
	}
	return nil
}
